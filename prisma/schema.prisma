generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admins {
  adminId  Int     @id @default(autoincrement())
  userId   Int
  username String? @db.VarChar(255)
  password String? @db.VarChar(255)
  users    users   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Restrict, map: "admins_ibfk_1")

  @@index([userId], map: "admins_ibfk_1")
}

model appconfig {
  configId        Int    @id @default(autoincrement())
  maxSeatsPerTrip Int
  geoConfig       String @db.VarChar(255)
}

model reservations {
  reservationId   Int      @id @default(autoincrement())
  tripId          Int
  passengerId     Int
  reservationTime DateTime @db.DateTime(0)
  driverId        Int
  trips           trips    @relation(fields: [tripId], references: [tripId], onDelete: Cascade, onUpdate: Restrict, map: "reservations_ibfk_1")
  users           users    @relation(fields: [passengerId], references: [userId], onDelete: Cascade, onUpdate: Restrict, map: "reservations_ibfk_2")

  @@unique([passengerId, tripId], map: "unique_reservation")
  @@index([tripId], map: "tripId")
}

model trips {
  tripId               Int             @id @default(autoincrement())
  departureLocation    String          @db.VarChar(100)
  destinationLocation  String          @db.VarChar(100)
  departureTime        DateTime        @db.DateTime(0)
  availableSeats       Int
  driverId             Int
  departureLatitude    Float?          @db.Float
  departureLongitude   Float?          @db.Float
  destinationLatitude  Float?          @db.Float
  destinationLongitude Float?          @db.Float
  maxSeatsPerTrip      Int
  reservations         reservations[]
  ride_requests        ride_requests[]
  users                users           @relation(fields: [driverId], references: [userId], onUpdate: Restrict, map: "trips_ibfk_1")

  @@index([driverId], map: "trips_ibfk_1")
}

model users {
  userId        Int             @id @default(autoincrement())
  firstName     String          @db.VarChar(50)
  lastName      String          @db.VarChar(50)
  phoneNumber   String          @db.VarChar(15)
  email         String          @unique(map: "email") @db.VarChar(100)
  studentId     String          @unique @db.VarChar(20)
  password      String          @db.VarChar(255)
  role          users_role?     @default(client)
  admins        admins[]
  proposition   proposition[]
  reports       reports[]
  reservations  reservations[]
  ride_requests ride_requests[]
  trips         trips[]
}

model ride_requests {
  requestId    Int                   @id @default(autoincrement())
  userId       Int
  tripId       Int
  status       ride_requests_status? @default(pending)
  nbr_seat_req Int?
  users        users                 @relation(fields: [userId], references: [userId], onUpdate: Restrict, map: "ride_requests_ibfk_1")
  trips        trips                 @relation(fields: [tripId], references: [tripId], onDelete: Cascade, onUpdate: Restrict, map: "ride_requests_ibfk_2")

  @@index([tripId], map: "tripId")
  @@index([userId], map: "userId")
}

model proposition {
  propositionId        Int      @id @default(autoincrement())
  userId               Int
  departureLocation    String   @db.VarChar(100)
  destinationLocation  String   @db.VarChar(100)
  departureTime        DateTime @db.DateTime(0)
  availableSeats       Int
  departureLatitude    Float?   @db.Float
  departureLongitude   Float?   @db.Float
  destinationLatitude  Float?   @db.Float
  destinationLongitude Float?   @db.Float
  users                users    @relation(fields: [userId], references: [userId], onUpdate: Restrict, map: "proposition_ibfk_1")

  @@index([userId], map: "userId")
}

model reports {
  reportId       Int       @id @default(autoincrement())
  userId         Int?
  problemType    String?   @db.VarChar(255)
  problemDetails String?   @db.Text
  createdAt      DateTime? @default(now()) @db.Timestamp(0)
  users          users?    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Restrict, map: "reports_ibfk_1")

  @@index([userId], map: "userId")
}

enum users_role {
  client
  driver
  admin
}

enum ride_requests_status {
  pending
  approved
  rejected
}
